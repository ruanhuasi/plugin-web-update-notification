{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\r\nimport { accessSync, constants, readFileSync, writeFileSync } from 'fs'\r\nimport { resolve } from 'path'\r\nimport type { Options } from '@plugin-ofs-web-update-notification/core'\r\nimport {\r\n  DIRECTORY_NAME,\r\n  INJECT_SCRIPT_FILE_NAME,\r\n  INJECT_STYLE_FILE_NAME,\r\n  JSON_FILE_NAME,\r\n  NOTIFICATION_ANCHOR_CLASS_NAME,\r\n  generateJSONFileContent,\r\n  generateJsFileContent,\r\n  getFileHash,\r\n  getVersion,\r\n  get__Dirname,\r\n} from '@plugin-ofs-web-update-notification/core'\r\nimport type { Compilation, Compiler } from '@rspack/core'\r\n\r\nconst PLUGIN_NAME = 'WebUpdateNotificationPlugin'\r\n\r\ntype PluginOptions = Options & {\r\n  /** index.html file path, by default, we will look up path.resolve(webpackOutputPath, './index.html') */\r\n  indexHtmlFilePath?: string\r\n}\r\n\r\n/**\r\n * It injects the hash into the HTML, and injects the notification anchor and the stylesheet and the\r\n * script into the HTML\r\n * @param {string} html - The original HTML of the page\r\n * @param {string} version - The hash of the current commit\r\n * @param {Options} options - Options\r\n * @returns The html of the page with the injected script and css.\r\n */\r\nfunction injectPluginHtml(\r\n  html: string,\r\n  version: string,\r\n  options: Options,\r\n  { cssFileHash, jsFileHash }: { jsFileHash: string; cssFileHash: string },\r\n) {\r\n  const { hiddenDefaultNotification, injectFileBase = '/' } = options;\r\n  \r\n  // 注入版本信息\r\n  const versionScript = `<script>window.pluginWebUpdateNotice_version = '${version}';</script>`;\r\n  \r\n  // 注入样式链接\r\n  const cssLinkHtml = hiddenDefaultNotification ? '' : \r\n    `<link rel=\"stylesheet\" href=\"${injectFileBase}${DIRECTORY_NAME}/${INJECT_STYLE_FILE_NAME}.${cssFileHash}.css\">`;\r\n  \r\n  // 注入脚本\r\n  html = html.replace(\r\n    '</head>',\r\n    `${cssLinkHtml}\r\n    <script src=\"${injectFileBase}${DIRECTORY_NAME}/${INJECT_SCRIPT_FILE_NAME}.${jsFileHash}.js\"></script>\r\n    ${versionScript}\r\n    </head>`\r\n  );\r\n  \r\n  // 注入通知容器\r\n  if (!hiddenDefaultNotification) {\r\n    html = html.replace(\r\n      '</body>',\r\n      `<div class=\"${NOTIFICATION_ANCHOR_CLASS_NAME}\"></div></body>`\r\n    );\r\n  }\r\n\r\n  return html\r\n}\r\n\r\nclass WebUpdateNotificationPlugin {\r\n  options: PluginOptions\r\n  constructor(options: PluginOptions) {\r\n    this.options = options || {}\r\n  }\r\n\r\n  apply(compiler: Compiler) {\r\n    /** inject script file hash */\r\n    let jsFileHash = ''\r\n    /** inject css file hash */\r\n    let cssFileHash = ''\r\n\r\n    const { publicPath } = compiler.options.output;\r\n    if (this.options.injectFileBase === undefined) {\r\n      this.options.injectFileBase = \r\n        typeof publicPath === 'string' ? publicPath : '/';\r\n    }\r\n    \r\n    const { hiddenDefaultNotification, versionType, indexHtmlFilePath, customVersion, silence } = this.options\r\n    let version = ''\r\n    \r\n    if (versionType === 'custom')\r\n      version = getVersion(versionType, customVersion!)\r\n    else\r\n      version = getVersion(versionType!)\r\n\r\n    compiler.hooks.emit.tap(PLUGIN_NAME, (compilation: Compilation) => {\r\n      // const outputPath = compiler.outputPath\r\n      const jsonFileContent = generateJSONFileContent(version, silence)\r\n      // @ts-expect-error\r\n      compilation.emitAsset[`${DIRECTORY_NAME}/${JSON_FILE_NAME}.json`] = {\r\n        source: () => jsonFileContent,\r\n        size: () => jsonFileContent.length,\r\n      }\r\n      if (!hiddenDefaultNotification) {\r\n        const injectStyleContent = readFileSync(`${get__Dirname()}/${INJECT_STYLE_FILE_NAME}.css`, 'utf8')\r\n        cssFileHash = getFileHash(injectStyleContent)\r\n\r\n        // @ts-expect-error\r\n        compilation.emitAsset[`${DIRECTORY_NAME}/${INJECT_STYLE_FILE_NAME}.${cssFileHash}.css`] = {\r\n          source: () => injectStyleContent,\r\n          size: () => injectStyleContent.length,\r\n        }\r\n      }\r\n\r\n      const filePath = resolve(`${get__Dirname()}/${INJECT_SCRIPT_FILE_NAME}.js`)\r\n      const injectScriptContent = generateJsFileContent(\r\n        readFileSync(filePath, 'utf8').toString(),\r\n        version,\r\n        this.options,\r\n      )\r\n      jsFileHash = getFileHash(injectScriptContent)\r\n\r\n      // @ts-expect-error\r\n      compilation.emitAsset[`${DIRECTORY_NAME}/${INJECT_SCRIPT_FILE_NAME}.${jsFileHash}.js`] = {\r\n        source: () => injectScriptContent,\r\n        size: () => injectScriptContent.length,\r\n      }\r\n    })\r\n\r\n    compiler.hooks.afterEmit.tap(PLUGIN_NAME, () => {\r\n      const outputPath = compiler.options.output.path || './dist';\r\n      const htmlFilePath = resolve(outputPath as string, indexHtmlFilePath || './index.html');\r\n      \r\n      try {\r\n        accessSync(htmlFilePath, constants.F_OK);\r\n        \r\n        let html = readFileSync(htmlFilePath, 'utf8');\r\n        \r\n        // 注入脚本\r\n        html = injectPluginHtml(\r\n          html,\r\n          version,\r\n          this.options,\r\n          {\r\n            jsFileHash,\r\n            cssFileHash,\r\n          },\r\n        )\r\n        \r\n        writeFileSync(htmlFilePath, html);\r\n      } catch (error) {\r\n        console.error(`${PLUGIN_NAME} failed to inject the plugin into the HTML file. index.html (${htmlFilePath}) not found.`);\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport { WebUpdateNotificationPlugin }\r\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,iCAAAE,IAAA,eAAAC,EAAAH,GACA,IAAAI,EAAmE,cACnEC,EAAwB,gBAExBC,EAWO,oDAGDC,EAAc,8BAepB,SAASC,EACPC,EACAC,EACAC,EACA,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAC1B,CACA,GAAM,CAAE,0BAAAC,EAA2B,eAAAC,EAAiB,GAAI,EAAIJ,EAGtDK,EAAgB,mDAAmDN,eAGnEO,EAAcH,EAA4B,GAC9C,gCAAgCC,IAAiB,oBAAkB,4BAA0BH,UAG/F,OAAAH,EAAOA,EAAK,QACV,UACA,GAAGQ;AAAA,mBACYF,IAAiB,oBAAkB,6BAA2BF;AAAA,MAC3EG;AAAA,YAEJ,EAGKF,IACHL,EAAOA,EAAK,QACV,UACA,eAAe,iDACjB,GAGKA,CACT,CAEA,IAAMP,EAAN,KAAkC,CAEhC,YAAYS,EAAwB,CAClC,KAAK,QAAUA,GAAW,CAAC,CAC7B,CAEA,MAAMO,EAAoB,CAExB,IAAIL,EAAa,GAEbD,EAAc,GAEZ,CAAE,WAAAO,CAAW,EAAID,EAAS,QAAQ,OACpC,KAAK,QAAQ,iBAAmB,SAClC,KAAK,QAAQ,eACX,OAAOC,GAAe,SAAWA,EAAa,KAGlD,GAAM,CAAE,0BAAAL,EAA2B,YAAAM,EAAa,kBAAAC,EAAmB,cAAAC,EAAe,QAAAC,CAAQ,EAAI,KAAK,QAC/Fb,EAAU,GAEVU,IAAgB,SAClBV,KAAU,cAAWU,EAAaE,CAAc,EAEhDZ,KAAU,cAAWU,CAAY,EAEnCF,EAAS,MAAM,KAAK,IAAIX,EAAciB,GAA6B,CAEjE,IAAMC,KAAkB,2BAAwBf,EAASa,CAAO,EAMhE,GAJAC,EAAY,UAAU,GAAG,oBAAkB,uBAAqB,EAAI,CAClE,OAAQ,IAAMC,EACd,KAAM,IAAMA,EAAgB,MAC9B,EACI,CAACX,EAA2B,CAC9B,IAAMY,KAAqB,gBAAa,MAAG,gBAAa,KAAK,+BAA8B,MAAM,EACjGd,KAAc,eAAYc,CAAkB,EAG5CF,EAAY,UAAU,GAAG,oBAAkB,4BAA0BZ,OAAiB,EAAI,CACxF,OAAQ,IAAMc,EACd,KAAM,IAAMA,EAAmB,MACjC,EAGF,IAAMC,KAAW,WAAQ,MAAG,gBAAa,KAAK,8BAA4B,EACpEC,KAAsB,4BAC1B,gBAAaD,EAAU,MAAM,EAAE,SAAS,EACxCjB,EACA,KAAK,OACP,EACAG,KAAa,eAAYe,CAAmB,EAG5CJ,EAAY,UAAU,GAAG,oBAAkB,6BAA2BX,MAAe,EAAI,CACvF,OAAQ,IAAMe,EACd,KAAM,IAAMA,EAAoB,MAClC,CACF,CAAC,EAEDV,EAAS,MAAM,UAAU,IAAIX,EAAa,IAAM,CAC9C,IAAMsB,EAAaX,EAAS,QAAQ,OAAO,MAAQ,SAC7CY,KAAe,WAAQD,EAAsBR,GAAqB,cAAc,EAEtF,GAAI,IACF,cAAWS,EAAc,YAAU,IAAI,EAEvC,IAAIrB,KAAO,gBAAaqB,EAAc,MAAM,EAG5CrB,EAAOD,EACLC,EACAC,EACA,KAAK,QACL,CACE,WAAAG,EACA,YAAAD,CACF,CACF,KAEA,iBAAckB,EAAcrB,CAAI,CAClC,MAAE,CACA,QAAQ,MAAM,GAAGF,iEAA2EuB,eAA0B,CACxH,CACF,CAAC,CACH,CACF","names":["src_exports","__export","WebUpdateNotificationPlugin","__toCommonJS","import_fs","import_path","import_core","PLUGIN_NAME","injectPluginHtml","html","version","options","cssFileHash","jsFileHash","hiddenDefaultNotification","injectFileBase","versionScript","cssLinkHtml","compiler","publicPath","versionType","indexHtmlFilePath","customVersion","silence","compilation","jsonFileContent","injectStyleContent","filePath","injectScriptContent","outputPath","htmlFilePath"]}