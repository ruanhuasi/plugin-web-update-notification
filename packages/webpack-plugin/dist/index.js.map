{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\r\nimport { accessSync, constants, readFileSync, writeFileSync } from 'fs'\r\nimport { resolve } from 'path'\r\nimport type { Options } from '@plugin-ofs-web-update-notification/core'\r\nimport {\r\n  DIRECTORY_NAME,\r\n  INJECT_SCRIPT_FILE_NAME,\r\n  INJECT_STYLE_FILE_NAME,\r\n  JSON_FILE_NAME,\r\n  NOTIFICATION_ANCHOR_CLASS_NAME,\r\n  generateJSONFileContent,\r\n  generateJsFileContent,\r\n  getFileHash,\r\n  getVersion,\r\n  get__Dirname,\r\n} from '@plugin-ofs-web-update-notification/core'\r\nimport type { Compilation, Compiler } from 'webpack'\r\n\r\nconst pluginName = 'WebUpdateNotificationPlugin'\r\n\r\ntype PluginOptions = Options & {\r\n  /** index.html file path, by default, we will look up path.resolve(webpackOutputPath, './index.html') */\r\n  indexHtmlFilePath?: string\r\n}\r\n\r\n/**\r\n * It injects the hash into the HTML, and injects the notification anchor and the stylesheet and the\r\n * script into the HTML\r\n * @param {string} html - The original HTML of the page\r\n * @param {string} version - The hash of the current commit\r\n * @param {Options} options - Options\r\n * @returns The html of the page with the injected script and css.\r\n */\r\nfunction injectPluginHtml(\r\n  html: string,\r\n  version: string,\r\n  options: Options,\r\n  { cssFileHash, jsFileHash }: { jsFileHash: string; cssFileHash: string },\r\n) {\r\n  const { customNotificationHTML, hiddenDefaultNotification, injectFileBase = '/' } = options\r\n\r\n  const versionScript = `<script>window.pluginWebUpdateNotice_version = '${version}';</script>`\r\n  const cssLinkHtml = customNotificationHTML || hiddenDefaultNotification ? '' : `<link rel=\"stylesheet\" href=\"${injectFileBase}${DIRECTORY_NAME}/${INJECT_STYLE_FILE_NAME}.${cssFileHash}.css\">`\r\n  let res = html\r\n\r\n  res = res.replace(\r\n    '<head>',\r\n    `<head>\r\n    ${cssLinkHtml}\r\n    <script src=\"${injectFileBase}${DIRECTORY_NAME}/${INJECT_SCRIPT_FILE_NAME}.${jsFileHash}.js\"></script>\r\n\r\n    ${versionScript}`,\r\n  )\r\n\r\n  if (!hiddenDefaultNotification) {\r\n    res = res.replace(\r\n      '</body>',\r\n      `<div class=\"${NOTIFICATION_ANCHOR_CLASS_NAME}\"></div></body>`,\r\n    )\r\n  }\r\n\r\n  return res\r\n}\r\n\r\nclass WebUpdateNotificationPlugin {\r\n  options: PluginOptions\r\n  constructor(options: PluginOptions) {\r\n    this.options = options || {}\r\n  }\r\n\r\n  apply(compiler: Compiler) {\r\n    /** inject script file hash */\r\n    let jsFileHash = ''\r\n    /** inject css file hash */\r\n    let cssFileHash = ''\r\n\r\n    const { publicPath } = compiler.options.output\r\n    if (this.options.injectFileBase === undefined)\r\n      this.options.injectFileBase = typeof publicPath === 'string' ? publicPath : '/'\r\n\r\n    const { hiddenDefaultNotification, versionType, indexHtmlFilePath, customVersion, silence } = this.options\r\n    let version = ''\r\n    if (versionType === 'custom')\r\n      version = getVersion(versionType, customVersion!)\r\n    else\r\n      version = getVersion(versionType!)\r\n\r\n    compiler.hooks.emit.tap(pluginName, (compilation: Compilation) => {\r\n      // const outputPath = compiler.outputPath\r\n      const jsonFileContent = generateJSONFileContent(version, silence)\r\n      // @ts-expect-error\r\n      compilation.assets[`${DIRECTORY_NAME}/${JSON_FILE_NAME}.json`] = {\r\n        source: () => jsonFileContent,\r\n        size: () => jsonFileContent.length,\r\n      }\r\n      if (!hiddenDefaultNotification) {\r\n        const injectStyleContent = readFileSync(`${get__Dirname()}/${INJECT_STYLE_FILE_NAME}.css`, 'utf8')\r\n        cssFileHash = getFileHash(injectStyleContent)\r\n\r\n        // @ts-expect-error\r\n        compilation.assets[`${DIRECTORY_NAME}/${INJECT_STYLE_FILE_NAME}.${cssFileHash}.css`] = {\r\n          source: () => injectStyleContent,\r\n          size: () => injectStyleContent.length,\r\n        }\r\n      }\r\n\r\n      const filePath = resolve(`${get__Dirname()}/${INJECT_SCRIPT_FILE_NAME}.js`)\r\n      const injectScriptContent = generateJsFileContent(\r\n        readFileSync(filePath, 'utf8').toString(),\r\n        version,\r\n        this.options,\r\n      )\r\n      jsFileHash = getFileHash(injectScriptContent)\r\n\r\n      // @ts-expect-error\r\n      compilation.assets[`${DIRECTORY_NAME}/${INJECT_SCRIPT_FILE_NAME}.${jsFileHash}.js`] = {\r\n        source: () => injectScriptContent,\r\n        size: () => injectScriptContent.length,\r\n      }\r\n    })\r\n\r\n    compiler.hooks.afterEmit.tap(pluginName, () => {\r\n      const htmlFilePath = resolve(compiler.outputPath, indexHtmlFilePath || './index.html')\r\n      try {\r\n        accessSync(htmlFilePath, constants.F_OK)\r\n\r\n        let html = readFileSync(htmlFilePath, 'utf8')\r\n        html = injectPluginHtml(\r\n          html,\r\n          version,\r\n          this.options,\r\n          {\r\n            jsFileHash,\r\n            cssFileHash,\r\n          },\r\n        )\r\n        writeFileSync(htmlFilePath, html)\r\n      }\r\n      catch (error) {\r\n        console.error(error)\r\n        console.error(`${pluginName} failed to inject the plugin into the HTML file. index.html（${htmlFilePath}） not found.`)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport { WebUpdateNotificationPlugin }\r\n"],"mappings":"AACA,OAAS,cAAAA,EAAY,aAAAC,EAAW,gBAAAC,EAAc,iBAAAC,MAAqB,KACnE,OAAS,WAAAC,MAAe,OAExB,OACE,kBAAAC,EACA,2BAAAC,EACA,0BAAAC,EACA,kBAAAC,EACA,kCAAAC,EACA,2BAAAC,EACA,yBAAAC,EACA,eAAAC,EACA,cAAAC,EACA,gBAAAC,MACK,2CAGP,IAAMC,EAAa,8BAenB,SAASC,EACPC,EACAC,EACAC,EACA,CAAE,YAAAC,EAAa,WAAAC,CAAW,EAC1B,CACA,GAAM,CAAE,uBAAAC,EAAwB,0BAAAC,EAA2B,eAAAC,EAAiB,GAAI,EAAIL,EAE9EM,EAAgB,mDAAmDP,eACnEQ,EAAcJ,GAA0BC,EAA4B,GAAK,gCAAgCC,IAAiBnB,KAAkBE,KAA0Ba,UACxKO,EAAMV,EAEV,OAAAU,EAAMA,EAAI,QACR,SACA;AAAA,MACED;AAAA,mBACaF,IAAiBnB,KAAkBC,KAA2Be;AAAA;AAAA,MAE3EI,GACJ,EAEKF,IACHI,EAAMA,EAAI,QACR,UACA,eAAelB,kBACjB,GAGKkB,CACT,CAEA,IAAMC,EAAN,KAAkC,CAEhC,YAAYT,EAAwB,CAClC,KAAK,QAAUA,GAAW,CAAC,CAC7B,CAEA,MAAMU,EAAoB,CAExB,IAAIR,EAAa,GAEbD,EAAc,GAEZ,CAAE,WAAAU,CAAW,EAAID,EAAS,QAAQ,OACpC,KAAK,QAAQ,iBAAmB,SAClC,KAAK,QAAQ,eAAiB,OAAOC,GAAe,SAAWA,EAAa,KAE9E,GAAM,CAAE,0BAAAP,EAA2B,YAAAQ,EAAa,kBAAAC,EAAmB,cAAAC,EAAe,QAAAC,CAAQ,EAAI,KAAK,QAC/FhB,EAAU,GACVa,IAAgB,SAClBb,EAAUL,EAAWkB,EAAaE,CAAc,EAEhDf,EAAUL,EAAWkB,CAAY,EAEnCF,EAAS,MAAM,KAAK,IAAId,EAAaoB,GAA6B,CAEhE,IAAMC,EAAkB1B,EAAwBQ,EAASgB,CAAO,EAMhE,GAJAC,EAAY,OAAO,GAAG9B,KAAkBG,QAAqB,EAAI,CAC/D,OAAQ,IAAM4B,EACd,KAAM,IAAMA,EAAgB,MAC9B,EACI,CAACb,EAA2B,CAC9B,IAAMc,EAAqBnC,EAAa,GAAGY,EAAa,KAAKP,QAA8B,MAAM,EACjGa,EAAcR,EAAYyB,CAAkB,EAG5CF,EAAY,OAAO,GAAG9B,KAAkBE,KAA0Ba,OAAiB,EAAI,CACrF,OAAQ,IAAMiB,EACd,KAAM,IAAMA,EAAmB,MACjC,EAGF,IAAMC,EAAWlC,EAAQ,GAAGU,EAAa,KAAKR,MAA4B,EACpEiC,EAAsB5B,EAC1BT,EAAaoC,EAAU,MAAM,EAAE,SAAS,EACxCpB,EACA,KAAK,OACP,EACAG,EAAaT,EAAY2B,CAAmB,EAG5CJ,EAAY,OAAO,GAAG9B,KAAkBC,KAA2Be,MAAe,EAAI,CACpF,OAAQ,IAAMkB,EACd,KAAM,IAAMA,EAAoB,MAClC,CACF,CAAC,EAEDV,EAAS,MAAM,UAAU,IAAId,EAAY,IAAM,CAC7C,IAAMyB,EAAepC,EAAQyB,EAAS,WAAYG,GAAqB,cAAc,EACrF,GAAI,CACFhC,EAAWwC,EAAcvC,EAAU,IAAI,EAEvC,IAAIgB,EAAOf,EAAasC,EAAc,MAAM,EAC5CvB,EAAOD,EACLC,EACAC,EACA,KAAK,QACL,CACE,WAAAG,EACA,YAAAD,CACF,CACF,EACAjB,EAAcqC,EAAcvB,CAAI,CAClC,OACOwB,EAAP,CACE,QAAQ,MAAMA,CAAK,EACnB,QAAQ,MAAM,GAAG1B,qEAAyEyB,oBAA0B,CACtH,CACF,CAAC,CACH,CACF","names":["accessSync","constants","readFileSync","writeFileSync","resolve","DIRECTORY_NAME","INJECT_SCRIPT_FILE_NAME","INJECT_STYLE_FILE_NAME","JSON_FILE_NAME","NOTIFICATION_ANCHOR_CLASS_NAME","generateJSONFileContent","generateJsFileContent","getFileHash","getVersion","get__Dirname","pluginName","injectPluginHtml","html","version","options","cssFileHash","jsFileHash","customNotificationHTML","hiddenDefaultNotification","injectFileBase","versionScript","cssLinkHtml","res","WebUpdateNotificationPlugin","compiler","publicPath","versionType","indexHtmlFilePath","customVersion","silence","compilation","jsonFileContent","injectStyleContent","filePath","injectScriptContent","htmlFilePath","error"]}